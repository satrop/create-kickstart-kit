---
import { asset } from "../../utils/assets";
import { Image } from "astro:assets";

export interface Props {
  src: string;
  alt: string;
  align?: "left" | "right";
  size?: "small" | "medium" | "large" | "auto";
  caption?: string;
  lazy?: boolean;
  fallback?: string;
  placeholder?: boolean;
  priority?: boolean;
  width?: number;
  height?: number;
  class?: string;
}

const {
  src,
  alt,
  align = "left",
  size = "medium",
  caption,
  lazy = true,
  fallback,
  placeholder = true,
  priority = false,
  width,
  height,
  class: className = "",
} = Astro.props;

const alignClass = `inline-img--${align}`;
const sizeClass = `inline-img--${size}`;

// Handle asset optimization
const optimizedSrc = asset(src);
const fallbackSrc = fallback ? asset(fallback) : undefined;

const imgClasses = ["inline-img__image", className].filter(Boolean).join(" ");

const wrapperClasses = ["inline-img", alignClass, sizeClass, caption ? "inline-img--with-caption" : ""]
  .filter(Boolean)
  .join(" ");

const imgAttributes = {
  src: lazy && !priority ? undefined : optimizedSrc,
  alt,
  loading: (lazy && !priority ? "lazy" : "eager") as "lazy" | "eager",
  class: imgClasses,
  "data-enhanced": "",
  ...(lazy && !priority && { "data-lazy": "", "data-src": optimizedSrc }),
  ...(fallbackSrc && { "data-fallback": fallbackSrc }),
  ...(placeholder !== undefined && { "data-placeholder": placeholder.toString() }),
  ...(width && { width }),
  ...(height && { height }),
};
---

<div class={wrapperClasses}>
  <Image
    src={optimizedSrc}
    alt={alt}
    loading={lazy && !priority ? "lazy" : "eager"}
    class={imgClasses}
    width={width || 400}
    height={height || 300}
    data-enhanced=""
  />
  {caption && <span class="inline-img__caption">{caption}</span>}
</div>
