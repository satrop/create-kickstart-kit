---
import { asset } from "../../utils/assets";

export interface Props {
  src: string;
  alt: string;
  caption?: string;
  size?: "small" | "medium" | "large" | "full";
  align?: "left" | "center" | "right";
  lazy?: boolean;
  fallback?: string;
  placeholder?: boolean;
  priority?: boolean;
  width?: number;
  height?: number;
  class?: string;
  figcaptionClass?: string;
}

const {
  src,
  alt,
  caption,
  size = "medium",
  align = "center",
  lazy = true,
  fallback,
  placeholder = true,
  priority = false,
  width,
  height,
  class: className = "",
  figcaptionClass = "",
} = Astro.props;

const sizeClass = `figure--${size}`;
const alignClass = `figure--${align}`;

// Handle asset optimization
const optimizedSrc = asset(src);
const fallbackSrc = fallback ? asset(fallback) : undefined;

const imgClasses = ["figure__image", className].filter(Boolean).join(" ");

const figureClasses = ["figure", sizeClass, alignClass, caption ? "figure--with-caption" : ""]
  .filter(Boolean)
  .join(" ");

const figcaptionClasses = ["figure__caption", figcaptionClass].filter(Boolean).join(" ");

const imgAttributes = {
  src: lazy && !priority ? undefined : optimizedSrc,
  alt,
  loading: (lazy && !priority ? "lazy" : "eager") as "lazy" | "eager",
  class: imgClasses,
  "data-enhanced": "",
  ...(lazy && !priority && { "data-lazy": "", "data-src": optimizedSrc }),
  ...(fallbackSrc && { "data-fallback": fallbackSrc }),
  ...(placeholder !== undefined && { "data-placeholder": placeholder.toString() }),
  ...(width && { width }),
  ...(height && { height }),
};
---

<figure class={figureClasses}>
  <img {...imgAttributes} />
  {caption && <figcaption class={figcaptionClasses}>{caption}</figcaption>}
</figure>
