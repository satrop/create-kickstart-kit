---
export interface AccordionItem {
  id: string;
  title: string;
  content?: string; // Optional plain text content
  htmlContent?: string; // Optional HTML content instead of plain text
}

export interface Props {
  items: AccordionItem[];
  allowMultiple?: boolean;
  variant?: "default" | "bordered" | "flush";
}

const { items, allowMultiple = false, variant = "default" } = Astro.props;
---

<div class={`accordion accordion--${variant}`} data-allow-multiple={allowMultiple}>
  {
    items.map((item, index) => (
      <div class="accordion__item" data-accordion-item>
        <h3 class="accordion__header">
          <button
            class="accordion__trigger"
            type="button"
            aria-expanded="false"
            aria-controls={`accordion-content-${item.id}`}
            id={`accordion-trigger-${item.id}`}
            data-accordion-trigger>
            <span class="accordion__title">{item.title}</span>
            <span class="accordion__icon" aria-hidden="true">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
              </svg>
            </span>
          </button>
        </h3>

        <div
          class="accordion__content"
          id={`accordion-content-${item.id}`}
          aria-labelledby={`accordion-trigger-${item.id}`}
          role="region"
          data-accordion-content>
          <div class="accordion__body">
            {item.htmlContent ? <div set:html={item.htmlContent} /> : item.content ? <p>{item.content}</p> : null}
          </div>
        </div>
      </div>
    ))
  }
</div>

<style lang="scss">
  @use "./Accordion.scss";
</style>

<script>
  import "./Accordion.js";
</script>
